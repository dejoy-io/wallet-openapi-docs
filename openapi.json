{
    "openapi": "3.0.2",
    "info": {
        "title": "Wallet API Documentations",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://api.x-wallet.io"
        }
    ],
    "paths":
      {
        "/api/v1/wallets/{wallet_id}": {
            "get": {
                "description": "get a wallet",
                "operationId": "v1.wallet.get",
                "parameters": [
                    {
                        "description": "The wallet's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The wallet's ID or UID",
                            "example": "unique-wallet-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Wallet",
                "tags": [
                    "Wallet"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const walletOut = await xwallet.wallet.get(\"wallet_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const walletOut = await xwallet.wallet.get(\"wallet_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "wallet_out = xwallet.wallet.get(\"wallet_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "wallet_out = await xwallet.wallet.get(\"wallet_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "walletOut, err := xwalletClient.Wallet.Get(ctx, \"wallet_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val walletOut = xwallet.wallet.get(\"wallet_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "WalletOut walletOut = xwallet.getWallet().get(\"wallet_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "wallet_out = xwallet.wallet.get(\"wallet_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let wallet_out = xwallet.wallet().get(\"wallet_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var walletOut = await xwallet.Wallet.GetAsync(\"wallet_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "xwallet wallet get \"wallet_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.xwallet.com/api/v1/wallets/{wallet_id}' \\\n  -H 'X-API-KEY: AUTH_TOKEN' \\\n  -H 'X-Signature: SIGNATURE' \\\n  -H 'X-Request-time: TIMESTAMP' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]      
            }
        },
        "/api/v1/wallets": {
            "post": {
                "description": "Create a new wallet.",
                "operationId": "v1.wallet.create",
                "parameters": [
                    {
                        "description": "Get an existing wallet, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing wallet, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WalletIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Wallet",
                "tags": [
                    "Wallet"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const walletOut = await xwallet.wallet.create({\n    name: \"My first wallet\",\n    uid: \"unique-wallet-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const walletOut = await xwallet.wallet.create({\n    name: \"My first wallet\",\n    uid: \"unique-wallet-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "wallet_out = xwallet.wallet.create(WalletIn(\n    name=\"My first wallet\",\n    uid=\"unique-wallet-identifier\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "wallet_out = await xwallet.wallet.create(WalletIn(\n    name=\"My first wallet\",\n    uid=\"unique-wallet-identifier\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "walletOut, err := xwalletClient.Wallet.Create(ctx, &WalletIn{\n    Name: \"My first wallet\",\n    Uid: \"unique-wallet-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val walletOut = xwallet.wallet.create(WalletIn()\n    .name(\"My first wallet\")\n    .uid(\"unique-wallet-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "WalletOut walletOut = xwallet.getWallet().create(new WalletIn()\n    .name(\"My first wallet\")\n    .uid(\"unique-wallet-identifier\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "wallet_out = xwallet.wallet.create(XWallet::WalletIn.new({\n    \"name\": \"My first wallet\",\n    \"uid\": \"unique-wallet-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let wallet_out = xwallet.wallet().create(WalletIn {\n    name: \"My first wallet\".to_string(),\n    uid: Some(\"unique-wallet-identifier\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var walletOut = await xwallet.Wallet.CreateAsync(new WalletIn{\n    name: \"My first wallet\",\n    uid: \"unique-wallet-identifier\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "xwallet wallet create '{\n    \"name\": \"My first wallet\",\n    \"uid\": \"unique-wallet-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.xwallet.io/api/v1/wallets' \\\n  -H 'X-API-KEY: AUTH_TOKEN' \\\n  -H 'X-Signature: SIGNATURE' \\\n  -H 'X-Request-time: TIMESTAMP' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first wallet\",\n        \"uid\": \"unique-wallet-identifier\"\n    }'"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "detail"
                ],
                "type": "object"
            },
            "HttpErrorOut": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "detail"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "ValidationError": {
                "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
                "properties": {
                    "loc": {
                        "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "msg": {
                        "description": "The message accompanying the validation error item.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
                        "type": "string"
                    }
                },
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object"
            },
            "WalletIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "example": "My first wallet",
                        "minLength": 1,
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the wallet",
                        "example": "unique-wallet-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "WalletOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The wallet's ID",
                        "example": "wallet_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "example": "My first wallet",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The wallet's UID",
                        "example": "unique-wallet-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            }
        }
    }
}
